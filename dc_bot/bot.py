import discord
from discord.ext import commands
from dotenv import load_dotenv
import os
import requests
from bs4 import BeautifulSoup
from datetime import datetime
import random

# ---------- webscraper ----------
def get_daily_text():
    today = datetime.now().strftime("%Y%m%d")
    url = f"https://www.maiige.hu/maiige/{today}"
    response = requests.get(url)
    if response.status_code != 200:
        return "Nem siker√ºlt lek√©rni az ig√©t.", url
    soup = BeautifulSoup(response.text, "html.parser")

    text_parts = []
    for element in soup.find_all(["p", "hr"]):
        if element.name == "hr":
            break  # meg√°llunk az els≈ë <hr> el≈ëtt
        text_parts.append(element.get_text(strip=True))

    text = "\n\n".join(text_parts) if text_parts else "Nincs tal√°lat."
    return text, url  # visszaadjuk a sz√∂veget √©s a linket
# ---------- v√©ge ----------

# ---------- bot setup ----------
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    print(f"Bejelentkezve: {bot.user}")

# ---------- √∫j parancs ----------
@bot.command()
async def maiige(ctx):
    try:
        text, url = get_daily_text()
        await ctx.send(f"A mai napi ige linkje: {url}\n\n{text}")
    except Exception as e:
        await ctx.send(f"Hiba t√∂rt√©nt: {e}")

@bot.command()
async def maiige_link(ctx):
    try:
        text, url = get_daily_text()
        await ctx.send(f"Mai ige: {url}")
    except Exception as e:
        await ctx.send(f"Hiba t√∂rt√©nt: {e}")

@bot.command()
async def maiige_szoveg(ctx):
    try:
        text, url = get_daily_text()
        await ctx.send(f"{text}")
    except Exception as e:
        await ctx.send(f"Hiba t√∂rt√©nt: {e}")

@bot.command()
async def kitalalo(ctx):
    # A bot "gondol" egy sz√°mot 1 √©s 100 k√∂z√∂tt
    target = random.randint(1, 100)
    await ctx.send("Gondoltam egy sz√°mra 1 √©s 100 k√∂z√∂tt. Tal√°ld ki! √çrd be a tipped.")

    def check(m):
    # Csak az adott szerz≈ë √©s csatorna, √©s a tartalom sz√°m legyen
        return m.author == ctx.author and m.channel == ctx.channel and m.content.isdigit()

    
    tries = 0
    while True:
        msg = await bot.wait_for("message", check=lambda m: m.author == ctx.author and m.channel == ctx.channel)
        
        if not msg.content.isdigit():
            continue  # ha nem sz√°m, ne csin√°ljon semmit, csak v√°rjon tov√°bb

        guess = int(msg.content)
        tries += 1

        if guess == target:
            await ctx.send(f"Gratul√°lok! Kital√°ltad a sz√°mot {tries} pr√≥b√°lkoz√°sb√≥l!")
            break
        elif guess > target:
            await ctx.send("Kisebb sz√°mra gondoltam")
        else:
            await ctx.send("Nagyobb sz√°mra gondoltam")


@bot.command(name="ping")
async def help_command(ctx):
    help_text = (
        "pong\nA bot jelenleg el√©rhet≈ë"
    )
    await ctx.send(help_text)


@bot.command(name="segitseg")
async def help_command(ctx):
    help_text = (
        "**El√©rhet≈ë botparancsok:**\n"
        "`!maiige` - Lek√©ri a mai napi ig√©t (sz√∂veg + link).\n"
        "`!maiige_link` - Csak a mai napi ige linkje.\n"
        "`!maiige_szoveg` - Csak a mai napi ige sz√∂vege.\n"
        "`!kitalalo` - Egy sz√°mkital√°l√≥ j√°t√©k 1 √©s 100 k√∂z√∂tt.\n"
        "`!amoba_ai` - Am≈ëba j√°t√©k a bot ellen (X vagy O v√°laszthat√≥).\n"
        "`!amoba_pvp` - Am≈ëba j√°t√©k 2 j√°t√©kosnak ugyanabban a csatorn√°ban.\n"
        "`!segitseg` - Megmutatja ezt az √ºzenetet."
    )
    await ctx.send(help_text)


@bot.command()
async def amoba_ai(ctx):
    import random

    lista = [["-", "-", "-"], ["-", "-", "-"], ["-", "-", "-"]]
    megteheto_lepesek = [(i, j) for i in range(3) for j in range(3)]
    db = 0
    kezdes = 1

    def felulir(lista, oszlop, sor):
        return lista[sor][oszlop] == "-"

    def kiirando(lista):
        # Discord √ºzenet form√°zott t√°bla
        sorok = []
        for i in lista:
            sorok.append(" | ".join(i))
        return "```\n" + "\n---------\n".join(sorok) + "\n```"

    def van_e_gyoztes(lista):
        for i in lista:
            if i.count("X") == 3 or i.count("O") == 3:
                return True
        for i in range(3):
            if [lista[j][i] for j in range(3)].count("X") == 3 or [lista[j][i] for j in range(3)].count("O") == 3:
                return True
        if [lista[i][i] for i in range(3)].count("X") == 3 or [lista[i][i] for i in range(3)].count("O") == 3:
            return True
        if [lista[0][2], lista[1][1], lista[2][0]].count("X") == 3 or [lista[0][2], lista[1][1], lista[2][0]].count("O") == 3:
            return True
        return False

    def geplepes(lista, gep_oldala, jatekos_oldala, megteheto_lepesek):
        # t√°mad√°s
        for i in range(3):
            for y in range(3):
                if lista[i][y] == "-":
                    lista[i][y] = gep_oldala
                    if van_e_gyoztes(lista):
                        return (i, y)
                    lista[i][y] = "-"
        # v√©dekez√©s
        for i in range(3):
            for y in range(3):
                if lista[i][y] == "-":
                    lista[i][y] = jatekos_oldala
                    if van_e_gyoztes(lista):
                        return (i, y)
                    lista[i][y] = "-"
        return random.choice(megteheto_lepesek)

    # oldal v√°laszt√°s
    await ctx.send("V√°lassz oldalt! X vagy O?")
    def check_choice(m):
        return m.author == ctx.author and m.channel == ctx.channel and m.content.upper() in ["X", "O"]
    msg = await bot.wait_for("message", check=check_choice)
    jatekos_oldala = msg.content.upper()
    gep_oldala = "O" if jatekos_oldala == "X" else "X"

    await ctx.send(f"Te {jatekos_oldala}-val j√°tszol, a g√©p {gep_oldala}-val.\n" + kiirando(lista))

    while True:
        try:
            if kezdes == 1:
                await ctx.send("Add meg a l√©p√©sed sor √©s oszlop sz√°m√°t, sz√≥k√∂zzel elv√°lasztva (pl. `1 1` a bal fels≈ë):")
                def check_move(m):
                    return m.author == ctx.author and m.channel == ctx.channel
                msg = await bot.wait_for("message", check=check_move)
                try:
                    bekert_adat = list(map(int, msg.content.split()))
                    if felulir(lista, bekert_adat[1]-1, bekert_adat[0]-1):
                        db += 1
                        lista[bekert_adat[0]-1][bekert_adat[1]-1] = jatekos_oldala
                        megteheto_lepesek.remove((bekert_adat[0]-1, bekert_adat[1]-1))
                        kezdes = 0
                        await ctx.send(kiirando(lista))
                    else:
                        await ctx.send("Ez a hely m√°r foglalt!")
                except:
                    await ctx.send("Hib√°s form√°tum! Adj meg k√©t sz√°mot.")
                    continue
            else:
                lepes = geplepes(lista, gep_oldala, jatekos_oldala, megteheto_lepesek)
                lista[lepes[0]][lepes[1]] = gep_oldala
                megteheto_lepesek.remove((lepes[0], lepes[1]))
                db += 1
                kezdes = 1
                await ctx.send(f"A g√©p l√©p√©se:\n{kiirando(lista)}")

            if van_e_gyoztes(lista):
                if kezdes == 1:
                    await ctx.send("A j√°t√©kos nyert! üéâ")
                else:
                    await ctx.send("A g√©p nyert! üò¢")
                break
            if db == 9:
                await ctx.send("D√∂ntetlen! üòê")
                break
        except Exception as e:
            await ctx.send(f"Hiba t√∂rt√©nt: {e}")
            break

@bot.command()
async def amoba_pvp(ctx):
    tabla = [["-", "-", "-"], ["-", "-", "-"], ["-", "-", "-"]]
    db = 0
    fut = True
    kezdes = 1  # X kezd
    players = {}  # felhaszn√°l√≥ ID-k t√°rol√°sa

    await ctx.send("Am≈ëba j√°t√©k 2 j√°t√©kosnak! Jelentkezz azzal, hogy reag√°lsz: X vagy O")
    await ctx.send("Els≈ë j√°t√©kos X lesz, m√°sodik O.")

    def check_join(m):
        return m.channel == ctx.channel and m.author != bot.user and m.content.upper() in ["X", "O"]

    # K√©t j√°t√©kos csatlakozik
    while len(players) < 2:
        msg = await bot.wait_for("message", check=check_join)
        if msg.author.id not in players:
            players[msg.author.id] = msg.content.upper()
            await ctx.send(f"{msg.author.name} a {msg.content.upper()} j√°t√©kos!")

    player_order = list(players.keys())  # X majd O sorrend

    def kiirando(tabla):
        sorok = []
        for sor in tabla:
            sorok.append(" | ".join(sor))
        return "```\n" + "\n---------\n".join(sorok) + "\n```"

    def felulir(tabla, oszlop, sor):
        return tabla[sor][oszlop] == "-"

    def van_e_gyoztes(tabla):
        for i in range(3):
            if tabla[i] == ['X','X','X'] or tabla[i]==['O','O','O']:
                return True
            if [tabla[j][i] for j in range(3)] in [['X','X','X'],['O','O','O']]:
                return True
        if [tabla[i][i] for i in range(3)] in [['X','X','X'],['O','O','O']]:
            return True
        if [tabla[i][2-i] for i in range(3)] in [['X','X','X'],['O','O','O']]:
            return True
        return False

    await ctx.send("J√°t√©k kezd≈ëdik!\n" + kiirando(tabla))

    while fut:
        current_player_id = player_order[(kezdes-1)%2]
        current_symbol = players[current_player_id]
        await ctx.send(f"<@{current_player_id}> l√©p√©se ({current_symbol}): add meg a sor √©s oszlop sz√°m√°t, sz√≥k√∂zzel elv√°lasztva (pl. `1 1`)")

        def check_move(m):
            return m.author.id == current_player_id and m.channel == ctx.channel

        try:
            msg = await bot.wait_for("message", check=check_move)
            bekert_adat = list(map(int, msg.content.split()))
            if felulir(tabla, bekert_adat[1]-1, bekert_adat[0]-1):
                tabla[bekert_adat[0]-1][bekert_adat[1]-1] = current_symbol
                db += 1
                kezdes += 1
                await ctx.send(kiirando(tabla))
            else:
                await ctx.send("Ez a hely m√°r foglalt, pr√≥b√°ld √∫jra!")
                continue

            if van_e_gyoztes(tabla):
                await ctx.send(f"{current_symbol} nyert! üéâ")
                fut = False
            elif db == 9:
                await ctx.send("D√∂ntetlen! üòê")
                fut = False

        except Exception as e:
            await ctx.send(f"Hiba t√∂rt√©nt: {e}")
            continue
@bot.command()
async def akasztofa(ctx):
    import os, random

    # Szavak bet√∂lt√©se
    script_dir = os.path.dirname(os.path.abspath(__file__))
    fajl_utvonal = os.path.join(script_dir, "szavak.txt")
    with open(fajl_utvonal, "r", encoding="utf-8") as file:
        szavak = [szo.strip() for szo in file.readlines() if szo.strip()]

    cel_szo = random.choice(szavak).lower()
    szo_hossz = len(cel_szo)
    tippek_szama = szo_hossz + 2

    helyes_betu = set()
    helytelen_betu = set()

    await ctx.send(f"√údv az akaszt√≥f√°ban! A sz√≥ {szo_hossz} bet≈± hossz√∫. {tippek_szama} tipp √°ll rendelkez√©sedre.")
    await ctx.send("A sz√≥ bet≈±it `.` jelekkel jel√∂lj√ºk. Tippelhetsz egy bet≈±t, vagy pr√≥b√°lkozhatsz az eg√©sz sz√≥val.")

    while tippek_szama > 0:
        kirajzolt_szo = "".join([b if b in helyes_betu else "." for b in cel_szo])
        await ctx.send(" ".join(kirajzolt_szo))

        if helyes_betu or helytelen_betu:
            await ctx.send("Felhaszn√°lt bet≈±k: " + " ".join(sorted(helyes_betu | helytelen_betu)))

        if "." not in kirajzolt_szo:
            await ctx.send("Gratul√°lok, kital√°ltad a sz√≥t! üéâ")
            break

        await ctx.send("Tippelj egy bet≈±t, vagy pr√≥b√°ld kital√°lni az eg√©sz sz√≥t:")

        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel

        msg = await bot.wait_for("message", check=check)
        tipp = msg.content.lower()

        # Teljes sz√≥ tippel√©se
        # Teljes sz√≥ tippel√©se
        if len(tipp) > 1:
            if tipp == cel_szo:
                await ctx.send(f"Gratul√°lok, kital√°ltad a sz√≥t! üéâ")
            else:
                await ctx.send(f"Hib√°s sz√≥! ‚ùå Vesztett√©l! A sz√≥ a(z) '{cel_szo}' volt.")
            break  # a j√°t√©k azonnal v√©get √©r


        # Egy bet≈± tippel√©se
        if len(tipp) != 1 or not tipp.isalpha():
            await ctx.send("K√©rlek, csak egy bet≈±t vagy teljes sz√≥t adj meg!")
            continue

        if tipp in helyes_betu or tipp in helytelen_betu:
            await ctx.send("Ezt a bet≈±t m√°r tippelted.")
            continue

        if tipp in cel_szo:
            helyes_betu.add(tipp)
            await ctx.send("Helyes bet≈±! ‚úÖ")
        else:
            helytelen_betu.add(tipp)
            tippek_szama -= 1
            await ctx.send(f"Rossz bet≈±! ‚ùå Maradt {tippek_szama} tipp.")

    else:
        await ctx.send(f"Vesztett√©l! A sz√≥ a(z) '{cel_szo}' volt.")



# ---------- futtat√°s ----------
bot.run(TOKEN)
